// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tasks     Task[]
}

model Task {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    title       String  @unique
    boardId     String  @db.ObjectId
    color       String  @default("#63fcb4")

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
    subTasks  SubTask[]
}

model SubTask {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    title    String
    finished Boolean @default(false)
    description String?
    subtasks String[]

    taskId    String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
